#
# Durham ARC Azure Pipeline for ManyFEWS Docker images
#
trigger:
  branches:
    include:
    - release

resources:
- repo: self

# Configure variables used by the build stages
variables:
  tag: 'azure-$(Build.BuildId)'
  dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
  dockerRegistryServiceConnection: 'DurhamARCDockerHub'
  imageRepository: 'durhamarc/manyfews'
  azureSubscriptionEndpoint: 'svc-con-awh'

stages:
- stage: Build
  displayName: Build image
  jobs:
  -
    job: BuildAndPush
    displayName: Build and Push ManyFEWS docker images
    pool:
      vmImage: ubuntu-latest
    steps:

    #
    # Log in to DockerHub:
    -
      task: Docker@2
      displayName: Login to DockerHub
      inputs:
        command: login
        containerRegistry: '$(dockerRegistryServiceConnection)'

    #
    # Set up the cache for building Docker containers
    # See: https://learn.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#docker-images
    -
      task: Cache@2
      displayName: Prepare Cache for Docker
      inputs:
        key: 'docker | "$(Agent.OS)" | cache'
        path: $(Pipeline.Workspace)/docker
        # Variable cacheHitVar will be set to 'true' when the cache is restored:
        cacheHitVar: CACHE_RESTORED

    -
      script: |
        docker load -i $(Pipeline.Workspace)/docker/cache.tar
      displayName: Docker restore
      condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

    #
    # Build the Docker image for the Gunicorn container
    # This needs to be done in two steps as we cannot pass arguments
    # into the Docker task with command 'buildAndPush'.
    -
      task: Docker@2
      displayName: Build Gunicorn python image
      env:
        DOCKER_BUILDKIT: 1
      inputs:
        command: build
        arguments: '--target gunicorn'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)-gunicorn
        dockerfile: $(dockerfile)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Push the Gunicorn image to DockerHub
    -
      task: Docker@2
      displayName: Push Gunicorn python image
      inputs:
        command: push
        repository: $(imageRepository)-gunicorn
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Now do the same for the Celery container:
    # Build the celery python image:
    -
      task: Docker@2
      displayName: Build Celery python image
      env:
        DOCKER_BUILDKIT: 1
      inputs:
        command: build
        arguments: '--target celery'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)-celery
        dockerfile: $(dockerfile)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Push the Celery image to DockerHub
    -
      task: Docker@2
      displayName: Push Celery python image
      inputs:
        command: push
        repository: $(imageRepository)-celery
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest,azure-latest,$(tag)

    #
    # And finally, for the web container:
    # Build the web python image:
    -
      task: Docker@2
      displayName: Build Web/Nginx python image
      env:
        DOCKER_BUILDKIT: 1
      inputs:
        command: build
        arguments: '--target web'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)-web
        dockerfile: $(dockerfile)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Push the Celery image to DockerHub
    -
      task: Docker@2
      displayName: Push Web/Nginx python image
      inputs:
        command: push
        repository: $(imageRepository)-web
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Save Cache for Docker images
    -
      script: |
        mkdir -p $(Pipeline.Workspace)/docker
        docker save -o $(Pipeline.Workspace)/docker/cache.tar \
          $(imageRepository)-web:$(tag) \
          $(imageRepository)-gunicorn:$(tag) \
          $(imageRepository)-celery:$(tag)
      displayName: Docker save
      condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))


- stage: Deploy
  displayName: Deploy stack to App Service environment
  # Deploy to Azure App service environment with Docker Compose
  jobs:
  - job: Deploy
    displayName: Deploy stack using docker-compose
    pool:
      vmImage: ubuntu-latest
    steps:

    -
      task: DockerCompose@0
      displayName: Deploy ManyFEWS services on Azure ASE Endpoint
      env:
        COMPOSE_PROJECT_NAME: $(COMPOSE_PROJECT_NAME)

        # Zentra acccount credentials
        ZENTRA_UN: $(ZENTRA_UN)
        ZENTRA_PW: $(ZENTRA_PW)

        MAP_URL: $(MAP_URL)
        SITE_URL: $(SITE_URL)

        # Postgres database credentials
        DB_NAME: $(DB_NAME)
        DB_USER: $(DB_USER)
        DB_PASSWORD: $(DB_PASSWORD)
        DB_HOST: $(DB_HOST)
        DB_PORT: $(DB_PORT)

        # External mailer credentials
        EMAIL_HOST: $(EMAIL_HOST)
        EMAIL_PORT: $(EMAIL_PORT)
        EMAIL_HOST_USER: $(EMAIL_HOST_USER)
        EMAIL_HOST_PASSWORD: $(EMAIL_HOST_PASSWORD)

        # Twilio account credentials:
        # see https://console.twilio.com/
        TWILIO_ACCOUNT_SID: $(TWILIO_ACCOUNT_SID)
        TWILIO_AUTH_TOKEN: $(TWILIO_AUTH_TOKEN)
        TWILIO_PHONE_NUMBER: $(TWILIO_PHONE_NUMBER)
        TWILIO_VERIFICATION_SID: $(TWILIO_VERIFICATION_SID)

        # Model values
        LAT_VALUE: $(LAT_VALUE)
        LON_VALUE: $(LON_VALUE)
        INITIAL_BACKTIME: $(INITIAL_BACKTIME)
        STATION_SN: $(STATION_SN)
        GEFS_FORECAST_DAYS: $(GEFS_FORECAST_DAYS)

        # Celery broker connection details
        RABBITMQ_DEFAULT_USER: (RABBITMQ_DEFAULT_USER)
        RABBITMQ_DEFAULT_PASS: $(RABBITMQ_DEFAULT_PASS)
        RABBITMQ_HOST: $(RABBITMQ_HOST)
        RABBITMQ_PORT: $(RABBITMQ_PORT)

        # Django deployment settings
        ALLOWED_HOSTS: $(ALLOWED_HOSTS)
        CSRF_TRUSTED_ORIGINS: $(CSRF_TRUSTED_ORIGINS)
      inputs:
        action: Run services
        containerregistrytype: Container Registry
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
        dockerComposeFile: .github/workflows/docker-compose.azure.yml
        dockerComposeCommand: 'up -d'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        buildImages: false
        abortOnContainerExit: true
        detached: false
