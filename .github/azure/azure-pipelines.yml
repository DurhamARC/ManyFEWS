#
# Durham ARC Azure Pipeline for ManyFEWS Docker images
#
trigger:
  branches:
    include:
    - release

pr: none

resources:
- repo: self

# Configure variables used by the build stages
# https://learn.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups
variables:
- group: manyfews-deployment

- name: tag
  value: 'azure-$(Build.BuildId)'
- name: dockerfile
  value: '$(Build.SourcesDirectory)/Dockerfile'
- name: dockerRegistryServiceConnection
  value: 'DurhamARCDockerHub'
- name: imageRepository
  value: 'durhamarc/manyfews'
- name: azureSubscriptionEndpoint
  value: 'svc-con-awh-01'

- name: containerRegistryName
  value: 'https://index.docker.io/v1'
- name: webAppResourceGroupName
  value: 'du-uks-awh-floodwarnings-01'
- name: webAppName
  value: 'duuksawhfloodwarnings01'


stages:
- stage: Build
  displayName: Build image
  jobs:
  -
    job: BuildAndPush
    displayName: Build and Push ManyFEWS docker images
    pool:
      vmImage: ubuntu-latest
    steps:

    #
    # Log in to DockerHub:
    -
      task: Docker@2
      displayName: Login to DockerHub
      inputs:
        command: login
        containerRegistry: '$(dockerRegistryServiceConnection)'

    #
    # Set up the cache for building Docker containers
    # See: https://learn.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops#docker-images
    -
      task: Cache@2
      displayName: Prepare Cache for Docker
      inputs:
        key: 'docker | "$(Agent.OS)" | cache'
        path: $(Pipeline.Workspace)/docker
        # Variable cacheHitVar will be set to 'true' when the cache is restored:
        cacheHitVar: CACHE_RESTORED

    -
      script: |
        docker load -i $(Pipeline.Workspace)/docker/cache.tar
      displayName: Docker restore
      condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

    #
    # Build the Docker image for the Gunicorn container
    # This needs to be done in two steps as we cannot pass arguments
    # into the Docker task with command 'buildAndPush'.
    -
      task: Docker@2
      displayName: Build Gunicorn python image
      env:
        DOCKER_BUILDKIT: 1
      inputs:
        command: build
        arguments: '--target gunicorn'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)-gunicorn
        dockerfile: $(dockerfile)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Push the Gunicorn image to DockerHub
    -
      task: Docker@2
      displayName: Push Gunicorn python image
      inputs:
        command: push
        repository: $(imageRepository)-gunicorn
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Now do the same for the Celery container:
    # Build the celery python image:
    -
      task: Docker@2
      displayName: Build Celery python image
      env:
        DOCKER_BUILDKIT: 1
      inputs:
        command: build
        arguments: '--target celery'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)-celery
        dockerfile: $(dockerfile)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Push the Celery image to DockerHub
    -
      task: Docker@2
      displayName: Push Celery python image
      inputs:
        command: push
        repository: $(imageRepository)-celery
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest,azure-latest,$(tag)

    #
    # And finally, for the web container:
    # Build the web image:
    -
      task: Docker@2
      displayName: Build Web/Nginx python image
      env:
        DOCKER_BUILDKIT: 1
      inputs:
        command: build
        arguments: '--target web'
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)-web
        dockerfile: $(dockerfile)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Push the Web image to DockerHub
    -
      task: Docker@2
      displayName: Push Web/Nginx python image
      inputs:
        command: push
        repository: $(imageRepository)-web
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest,azure-latest,$(tag)

    #
    # Save Cache for Docker images
    -
      script: |
        mkdir -p $(Pipeline.Workspace)/docker
        docker save -o $(Pipeline.Workspace)/docker/cache.tar \
          $(imageRepository)-web:$(tag) \
          $(imageRepository)-gunicorn:$(tag) \
          $(imageRepository)-celery:$(tag)
      displayName: Docker save
      condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))


#    -
#      task: DockerCompose@0
#      displayName: Run docker-compose to check config is correct
#      env:
#        COMPOSE_PROJECT_NAME: $(COMPOSE_PROJECT_NAME)
#
#        # Zentra acccount credentials
#        ZENTRA_UN: $(ZENTRA_UN)
#        ZENTRA_PW: $(ZENTRA_PW)
#
#        MAP_URL: $(MAP_URL)
#        SITE_URL: $(SITE_URL)
#
#        # Postgres database credentials
#        DB_NAME: $(DB_NAME)
#        DB_USER: $(DB_USER)
#        DB_PASSWORD: $(DB_PASSWORD)
#        DB_HOST: $(DB_HOST)
#        DB_PORT: $(DB_PORT)
#
#        # External mailer credentials
#        EMAIL_HOST: $(EMAIL_HOST)
#        EMAIL_PORT: $(EMAIL_PORT)
#        EMAIL_HOST_USER: $(EMAIL_HOST_USER)
#        EMAIL_HOST_PASSWORD: $(EMAIL_HOST_PASSWORD)
#
#        # Twilio account credentials:
#        # see https://console.twilio.com/
#        TWILIO_ACCOUNT_SID: $(TWILIO_ACCOUNT_SID)
#        TWILIO_AUTH_TOKEN: $(TWILIO_AUTH_TOKEN)
#        TWILIO_PHONE_NUMBER: $(TWILIO_PHONE_NUMBER)
#        TWILIO_VERIFICATION_SID: $(TWILIO_VERIFICATION_SID)
#
#        # Model values
#        LAT_VALUE: $(LAT_VALUE)
#        LON_VALUE: $(LON_VALUE)
#        INITIAL_BACKTIME: $(INITIAL_BACKTIME)
#        STATION_SN: $(STATION_SN)
#        GEFS_FORECAST_DAYS: $(GEFS_FORECAST_DAYS)
#
#        # Celery broker connection details
#        RABBITMQ_DEFAULT_USER: $(RABBITMQ_DEFAULT_USER)
#        RABBITMQ_DEFAULT_PASS: $(RABBITMQ_DEFAULT_PASS)
#        RABBITMQ_HOST: $(RABBITMQ_HOST)
#        RABBITMQ_PORT: $(RABBITMQ_PORT)
#
#        # Django deployment settings
#        ALLOWED_HOSTS: $(ALLOWED_HOSTS)
#        CSRF_TRUSTED_ORIGINS: $(CSRF_TRUSTED_ORIGINS)
#
#      inputs:
#        action: Run services
#        containerregistrytype: Container Registry
#        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#        dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
#        dockerComposeFile: .github/azure/docker-compose.azure.yml
#        dockerComposeCommand: 'up -d'
#        projectName: $(Build.Repository.Name)
#        qualifyImageNames: true
#        buildImages: false
#        abortOnContainerExit: true
#        detached: false


- stage: Deploy
  displayName: Deploy app to Production App Service Environment
  # Deploy to Azure App service environment with Docker Compose
  jobs:
  - job: Deploy
    displayName: Deploy using AzureWebAppContainer task
    pool:
      name: Default
    steps:
      -
        script: |
          echo  '$(System.DefaultWorkingDirectory)'
        displayName: Default Working Directory

      -
        task: AzureAppServiceSettings@1
        displayName: Azure App Service Settings
        inputs:
          azureSubscription: $(azureSubscriptionEndpoint)
          appName: $(webAppName)
          # To deploy the settings on a slot, provide slot name as below.
          # By default, the settings would be applied to the actual Web App (Production slot)
          # slotName: staging
          appSettings: |
            [{
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "$(containerRegistryName)",
              "slotSetting": false
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "$(DOCKER_REGISTRY_SERVER_USERNAME)",
              "slotSetting": false
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "$(DOCKER_REGISTRY_SERVER_PASSWORD)",
              "slotSetting": false
            }]


      # Azure App Service deploy v4
      # Deploy app to Azure App Service using Docker
      -
        task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'                         # 'AzureRM' | 'PublishProfile'. Required. Connection type. Default: AzureRM.
          azureSubscription: $(azureSubscriptionEndpoint)   # string. Required when ConnectionType = AzureRM. Azure subscription.
          appType: 'webAppContainer'                        # 'webApp' | 'webAppLinux' | 'webAppContainer' | 'functionApp' | 'functionAppLinux' | 'functionAppContainer' | 'apiApp' | 'mobileApp'. Required when ConnectionType = AzureRM. App Service type. Default: webApp.
          WebAppName: $(webAppName)                         # string. Required when ConnectionType = AzureRM. App Service name.
          deployToSlotOrASE: true                           # boolean. Optional. Use when ConnectionType = AzureRM && WebAppKind != "". Deploy to Slot or App Service Environment. Default: false.
          ResourceGroupName: $(webAppResourceGroupName)     # string. Required when DeployToSlotOrASEFlag = true. Resource group.
          SlotName: 'production'                            # string. Required when DeployToSlotOrASEFlag = true. Slot. Default: production.
          DockerNamespace: $(containerRegistryName)         # string. Required when WebAppKind = webAppContainer || WebAppkind = functionAppContainer. Registry or Namespace.
          DockerRepository: $(imageRepository)-web          # string. Required when WebAppKind = webAppContainer || WebAppkind = functionAppContainer. Image.
          DockerImageTag: $(tag)                            # string. Optional. Use when WebAppKind = webAppContainer || WebAppkind = functionAppContainer. Tag.
          StartupCommand:                                   # string. Optional. Use when WebAppKind = webAppLinux || WebAppKind = webAppContainer || WebAppkind = functionAppContainer || WebAppKind = functionAppLinux. Startup command.
          # Application and Configuration Settings
#          AppSettings:                                      # string. App settings.
#          ConfigurationSettings:                            # string. Configuration settings.
      -
        task: AzureAppServiceManage@0
        inputs:
          azureSubscription: $(azureSubscriptionEndpoint)
          Action: 'Restart Azure App Service'
          WebAppName: $(webAppName)
