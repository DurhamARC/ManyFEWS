version: '3.6'

services:

  # RabbitMQ message queue service for Celery task broker
  rabbitmq:
    image: rabbitmq:3.10
    container_name: ${COMPOSE_PROJECT_NAME}_rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    # ports:
    #   - 5672:5672 # AMQP no TLS
    networks:
      - backend


  # PostGIS server
  postgres:
    image: postgis/postgis:14-3.2
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    restart: always
    environment:
      # must specify password for PG Docker container image, see: https://registry.hub.docker.com/_/postgres?tab=description&page=1&name=10
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGUSER: ${DB_USER}
    ports:
      - 5432:5432
    shm_size: 8g
    # Needed because the postgres container does not provide a healthcheck
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgresql:/var/lib/postgresql
    networks:
      - backend


  # Celery container runs from the same image as the django container below
  celery:
    container_name: ${COMPOSE_PROJECT_NAME}_celery
    build:
      context: .
      target: celery
    restart: always
    env_file:
      - .env
    depends_on:
      - rabbitmq
    volumes:
      - uploads:/app/files/params/
    networks:
      - backend


  # Handle scheduled tasks with Celery Beat
  celery_beat:
    build:
      context: .
      target: celery
    restart: always
    env_file:
      - .env
    command:
      - "celery -A manyfews beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - ./project/:/usr/src/app/
    depends_on:
      - rabbitmq
    networks:
      - backend


  # Gunicorn container running Django app with uWSGI
  #
  # Run commands within the running container using:
  # docker exec -it <container_id> /bin/bash
  # Use `docker ps` to find the <container_id>
  gunicorn:
    container_name: ${COMPOSE_PROJECT_NAME}_gunicorn
    build:
      context: .
      target: gunicorn
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
      - rabbitmq
      - celery
    volumes:
      - uploads:/app/files/params/
    networks:
      - backend


  # Web server container
  web:
    build:
      context: .
      target: web
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    restart: always
    depends_on:
      - gunicorn
    networks:
      - backend
      - default
    ports:
      - "8000:80/tcp"


# Define networks and volumes
networks:
  backend:
  default:

volumes:
  postgresql:
    driver_opts:
      type: none
      device: ${PWD}/volumes/postgres
      o: bind
  uploads:
